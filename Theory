In jQuery it is very easy to select an element and change its properties like in js fist we select an element by querySelectorAll() and then change its properties like.
var a =document.querySelectorAll("h1");
a.style.backgroundColor("pink")
------But in jQuery we use "$" to select an item and .css to change its properties:
$("h1").css("color","pink");
--------OR------ we can add group of properties like- 
var styles={background:"pink",
  border : 2px solid red,
  fontWeight: "bold"
};
$("h1").css(styles);   //And it'll change all its properties
We can also change properties according to class or ids or tag name.
$("#a").css("color","red");
 /////////////////////////////////////////  We have to use camel case in writing attributes like font-size(in CSS) and fontSize(in jQuery)
We can select all the element of one kind at a time like slection of all the li tags
$("li").css({
  fontSize: "10px",
  border: "3px dashed purple",
  background:"rgba(89, 45, 28, 0.5)"
});

//////////////////////////////////////
When in js we have to make many elements
var a=document.querySelectorAll("li");
for(var i=0;i<a.length;i++){
 a[i].style.backgroundColor("red");
};
///////////////////
Some examples of selectors:
Select all divs and give them purple color
$("div").css({background:"purple"});
    OR
$("div").css("background","purple");

Select div with calss "highlight" and make them 200px wide
$("div.highlight").css("width","200px");
    OR
$(".highlight").css("width","200px");

Select the div with the id "third" and give it an orange border
$("div#third").css("border","orange 2px solid");
        OR
$("#third").css("border","2px solid orange");

Select the first div only and change its font color to pink
$("div:first-of-type").css("color","pink");   //This is css slector type
    OR
$("div:first").css("color","pink");  //This shortcut in only in jQuery and it's a bit slower
 /////////////////////////////////////////////////////////////////////
 
 Functions:  
 1-  .text() - It'll give all the text component in it.   $("h1").text();
         It also changes text e.g.  $("h1").text("New Text");
 2-  .html() - It'll get the html element, like it corresponds to inner html and we can change its content like textContent().
       $("ul").html();
"
   <li>Skittles</li>
   <li>Starburst</li>
   <li>Twix</li>
 "
$("html").html("<li> Hey </li><li> What is your name</li>"); //It'll change the whole html content of the page
O/P- Only--- Hey
             What is your name
$("ul").html("<li> Hey </li><li> What is your name</li>"); //It'll change the li content or we can say html content
 O/p- Everything on the webpage would be same as it was and in the list it will change its content
********* If we use .text() - It will the just show the text or we can say whole string along with all the tags and commands of the html. So In order to add list or ul or link<a> It is must to use .html() it order to show it.

3-  .attr() -- (Attribute ) $("img").attr("width","500px") 
   It just work as css but we only can change attribute.
   For selecting first image in group of images
   $("img:first-of-type").attr("src","index.jpeg")
   For selecting the last image.
   $("img").last().attr("src","abc.jpg")     //last function will give the last element
   
4- .val() --  It give the value of the first element in the set of the matched element. It's like .value
   $("input").val();   // It will give the value  
   We can also change the value using this function
   $("input").val("abc");
   
 5. .addClass()
    .removeClass()   $("ul").removeClass("class1");
    .toggleClass()   $("ul").last().toggleClass("class2");


---Methods:
1. .click() - $("#submit").click(function(){console.log("Another Click");});
             $("button").click(function(){console.log("Clicked")});
  We can also write css code using click to add more properties
          $("h1").click(function(){$(this).css("background","purple")});    //We use JS code here along with jQuery and this used to select this item.
          ** We can take input name from a button and print it when someone click on it.
          $("button").click(function(){ var a= $(this).text();  console.log("You clicked " + a)});  //It's saving the current value in the tag and then printing it.
2. .keydown() - When the key is pressed down 
   .keyup()  - when the key id comes up after pressing it down
   .keypress() - It indicates that the character entered
   keydown and keyup prive a code indicating which key is pressed while keypress indicates which character was entered.For example a lowercase 'a' will be reported as 65 by keydown and keyup but as 97 by keypress. An uppercase 'A' is reported as 65 by all events. Because of this distinction which catching special keystrokes such as arrow keys, .keydown() or .keyup() is a better choice.
   
E.G.-  $("input").keypress(function(){console.log("You pressed a key");});  //It'l give output after every key pressed

***********We can determine the key because every key has its unique keyCode in the JS***********
$("input").keypress(function(Event){if(Event.which==13){alert("You hit Enter");}});
//It'll give output whenever "ENTER" key is pressed. "13" is the key code for enter.

3. on() -It also works as event listener. We can add event click or double click or keypress
  After writing on we have to write the type of event like click and then write the funciton
  e.g. $("button").on('dblclick',function(){alert("Double Click");});
        $('a').on('dragstart',function(){console.log("Drag Started");});
        $("input"[type="text"]).on("keypress",function(){alert("Key Press in an input");});
   --If we have three same type of tags like three paragraph tags or three heading tags and we have t select only on tag an change its color then 
   $("h1").on("click",function(){$(this).css("color","purple");}); 
   
****** There are two events in the on fucntion - "mouseenter" and "mouseleave" ******
 "mouseenter" is used when curser hover over button and "mouseleave" when curser leaves the button It'll show the output
 
 
 *****////// Difference between click() and on("click")  
 click() will only add clicklistener only present at that time on the page byt on the on("click") will add event to the future possible element on the page which is not at the page right now but probably will be written by the user. 
   
   
   
   
   
   
   
   
   
   




